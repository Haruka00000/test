import cv2
import dlib
import numpy as np

#OpenCVのカスケードファイルと学習済みモデルのパスを指定
CASCADE_PATH = "./haarcascades/"
CASCADE = cv2.CascadeClassifier(CASCADE_PATH + 'haarcascade_frontalface_default.xml')

LEARNED_MODEL_PATH ="./learned-models/"
PREDICTOR = dlib.shape_predictor(LEARNED_MODEL_PATH + 'shape_predictor_68_face_landmarks.dat')

# 顔の位置を検出 返却値は位置を表すリスト(x,y,w,h)
def face_position(gray_img):
    faces = CASCADE.detectMultiScale(gray_img, minSize=(100, 100))
    return faces

# ランドマーク検出
def facemark(gray_img):
    faces_roi = face_position(gray_img)
    landmarks = []

    for face in faces_roi:
        detector = dlib.get_frontal_face_detector()
        rects = detector(gray_img, 1)
        landmarks = []

        for rect in rects:
            landmarks.append(
                np.array([[p.x, p.y] for p in PREDICTOR(gray_img, rect).parts()]))

    return landmarks

# 魚顔に変形する関数
def fish_face(img, points):
    # 目の位置を取得
    left_eye = points[36]
    right_eye = points[45]
    center_eye = (left_eye + right_eye) / 2

    # 口の位置を取得
    mouth = points[62]

    # 目と口の中心点を取得
    center = (center_eye + mouth) / 2

    # 顔の幅と高さを取得
    face_width = np.abs(left_eye[0] - right_eye[0]) * 2.5
    face_height = np.abs(center[1] - points[27][1]) * 2.5

    # 変換行列を作成
    M = cv2.getAffineTransform(np.float32([left_eye, right_eye, center]),
                               np.float32([[0, face_height], [face_width, face_height], [face_width / 2, 0]]))

    # 画像を変形して魚顔にする
    img = cv2.warpAffine(img, M, (img.shape[1], img.shape[0]))

    return img

def main():
    img = cv2.imread("./img/input.jpg")#自分の画像に置き換え
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)#処理を早くするためグレースケールに変換
    landmarks = facemark(gray)#ランドマーク検出

    # 魚顔に変形
    for landmark in landmarks:
        img = fish_face(img, landmark)

    # 表示
    cv2.imshow("video frame", img)
    cv2.waitKey(0)

    # 保存
    cv2.imwrite("./
