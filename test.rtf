{\rtf1\ansi\ansicpg932\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import cv2\
import dlib\
import numpy as np\
\
#OpenCV\uc0\u12398 \u12459 \u12473 \u12465 \u12540 \u12489 \u12501 \u12449 \u12452 \u12523 \u12392 \u23398 \u32722 \u28168 \u12415 \u12514 \u12487 \u12523 \u12398 \u12497 \u12473 \u12434 \u25351 \u23450 \
CASCADE_PATH = "./haarcascades/"\
CASCADE = cv2.CascadeClassifier(CASCADE_PATH + 'haarcascade_frontalface_default.xml')\
\
LEARNED_MODEL_PATH ="./learned-models/"\
PREDICTOR = dlib.shape_predictor(LEARNED_MODEL_PATH + 'shape_predictor_68_face_landmarks.dat')\
\
# \uc0\u38996 \u12398 \u20301 \u32622 \u12434 \u26908 \u20986  \u36820 \u21364 \u20516 \u12399 \u20301 \u32622 \u12434 \u34920 \u12377 \u12522 \u12473 \u12488 (x,y,w,h)\
def face_position(gray_img):\
    faces = CASCADE.detectMultiScale(gray_img, minSize=(100, 100))\
    return faces\
\
# \uc0\u12521 \u12531 \u12489 \u12510 \u12540 \u12463 \u26908 \u20986 \
def facemark(gray_img):\
    faces_roi = face_position(gray_img)\
    landmarks = []\
\
    for face in faces_roi:\
        detector = dlib.get_frontal_face_detector()\
        rects = detector(gray_img, 1)\
        landmarks = []\
\
        for rect in rects:\
            landmarks.append(\
                np.array([[p.x, p.y] for p in PREDICTOR(gray_img, rect).parts()]))\
\
    return landmarks\
\
# \uc0\u39770 \u38996 \u12395 \u22793 \u24418 \u12377 \u12427 \u38306 \u25968 \
def fish_face(img, points):\
    # \uc0\u30446 \u12398 \u20301 \u32622 \u12434 \u21462 \u24471 \
    left_eye = points[36]\
    right_eye = points[45]\
    center_eye = (left_eye + right_eye) / 2\
\
    # \uc0\u21475 \u12398 \u20301 \u32622 \u12434 \u21462 \u24471 \
    mouth = points[62]\
\
    # \uc0\u30446 \u12392 \u21475 \u12398 \u20013 \u24515 \u28857 \u12434 \u21462 \u24471 \
    center = (center_eye + mouth) / 2\
\
    # \uc0\u38996 \u12398 \u24133 \u12392 \u39640 \u12373 \u12434 \u21462 \u24471 \
    face_width = np.abs(left_eye[0] - right_eye[0]) * 2.5\
    face_height = np.abs(center[1] - points[27][1]) * 2.5\
\
    # \uc0\u22793 \u25563 \u34892 \u21015 \u12434 \u20316 \u25104 \
    M = cv2.getAffineTransform(np.float32([left_eye, right_eye, center]),\
                               np.float32([[0, face_height], [face_width, face_height], [face_width / 2, 0]]))\
\
    # \uc0\u30011 \u20687 \u12434 \u22793 \u24418 \u12375 \u12390 \u39770 \u38996 \u12395 \u12377 \u12427 \
    img = cv2.warpAffine(img, M, (img.shape[1], img.shape[0]))\
\
    return img\
\
def main():\
    img = cv2.imread("./img/input.jpg")#\uc0\u33258 \u20998 \u12398 \u30011 \u20687 \u12395 \u32622 \u12365 \u25563 \u12360 \
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)#\uc0\u20966 \u29702 \u12434 \u26089 \u12367 \u12377 \u12427 \u12383 \u12417 \u12464 \u12524 \u12540 \u12473 \u12465 \u12540 \u12523 \u12395 \u22793 \u25563 \
    landmarks = facemark(gray)#\uc0\u12521 \u12531 \u12489 \u12510 \u12540 \u12463 \u26908 \u20986 \
\
    # \uc0\u39770 \u38996 \u12395 \u22793 \u24418 \
    for landmark in landmarks:\
        img = fish_face(img, landmark)\
\
    # \uc0\u34920 \u31034 \
    cv2.imshow("video frame", img)\
    cv2.waitKey(0)\
\
    # \uc0\u20445 \u23384 \
    cv2.imwrite("./\
}